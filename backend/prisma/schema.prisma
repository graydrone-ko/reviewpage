generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String           @id @default(cuid())
  email         String           @unique
  password      String
  name          String
  role          Role             @default(CONSUMER)
  gender        Gender
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  accountNumber String
  bankCode      String
  birthDate     String
  phoneNumber   String           @unique
  rewards       Reward[]
  responses     SurveyResponse[]
  surveys       Survey[]

  @@map("users")
}

model SurveyTemplate {
  id          String       @id @default(cuid())
  name        String
  description String?
  isDefault   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  steps       SurveyStep[]
  surveys     Survey[]

  @@map("survey_templates")
}

model SurveyStep {
  id          String           @id @default(cuid())
  templateId  String
  stepNumber  Int
  title       String
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  questions   SurveyQuestion[]
  template    SurveyTemplate   @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, stepNumber])
  @@map("survey_steps")
}

model SurveyQuestion {
  id             String           @id @default(cuid())
  stepId         String
  questionNumber Int
  text           String
  type           QuestionType
  required       Boolean          @default(true)
  minLength      Int?             // 주관식 질문 최소 글자 수
  maxLength      Int?             // 주관식 질문 최대 글자 수
  placeholder    String?          // 주관식 질문 placeholder
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  options        QuestionOption[]
  step           SurveyStep       @relation(fields: [stepId], references: [id], onDelete: Cascade)

  @@unique([stepId, questionNumber])
  @@map("survey_questions")
}

model QuestionOption {
  id           String         @id @default(cuid())
  questionId   String
  optionNumber Int
  text         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  question     SurveyQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([questionId, optionNumber])
  @@map("question_options")
}

model Survey {
  id                    String                      @id @default(cuid())
  title                 String
  storeName             String                      @default("") // 판매자 스토어 이름
  description           String?
  url                   String
  sellerId              String
  templateId            String
  targetAgeMin          Int
  targetAgeMax          Int
  targetGender          Gender
  reward                Float
  maxParticipants       Int                         @default(50)
  totalBudget           Float?
  status                SurveyStatus                @default(PENDING)
  customSteps           Json?
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt
  endDate               DateTime
  approvedAt            DateTime?                   // 승인 시간
  completedAt           DateTime?                   // 완료 시간
  suspendedAt           DateTime?                   // 일시중단 시간
  rejectionReason       String?                     // 거부 사유
  extensionCount        Int                         @default(0) // 연장 횟수
  extensionHistory      Json?                       // 연장 이력
  cancellationStatus    CancellationStatus?
  cancellationRequestedAt DateTime?
  responses             SurveyResponse[]
  seller                User                        @relation(fields: [sellerId], references: [id])
  template              SurveyTemplate              @relation(fields: [templateId], references: [id])
  cancellationRequest   SurveyCancellationRequest?

  @@map("surveys")
}

model SurveyResponse {
  id         String   @id @default(cuid())
  surveyId   String
  consumerId String
  responses  Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt @default(now()) // 수정 추적용
  consumer   User     @relation(fields: [consumerId], references: [id])
  survey     Survey   @relation(fields: [surveyId], references: [id])

  @@unique([surveyId, consumerId]) // 중복 참여 방지
  @@map("survey_responses")
}

model Reward {
  id        String       @id @default(cuid())
  userId    String
  amount    Float
  type      RewardType
  status    RewardStatus @default(PENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      User         @relation(fields: [userId], references: [id])

  @@map("rewards")
}

enum Role {
  SELLER
  CONSUMER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  ALL
}

enum SurveyStatus {
  PENDING
  APPROVED
  COMPLETED
  CANCELLED
  SUSPENDED
}

enum CancellationStatus {
  PENDING   // 요청됨
  APPROVED  // 승인됨 
  REJECTED  // 거절됨
}

enum RewardType {
  SURVEY_COMPLETION
  BONUS
  REFUND
}

enum RewardStatus {
  PENDING
  PAID
}

enum QuestionType {
  MULTIPLE_CHOICE
  TEXT
  SCORE
  YES_NO
}

model SurveyCancellationRequest {
  id           String             @id @default(cuid())
  surveyId     String             @unique
  reason       String             // 중단 사유
  refundAmount Float              // 환불 예정액
  status       CancellationStatus @default(PENDING)
  requestedAt  DateTime           @default(now())
  processedAt  DateTime?
  processedBy  String?            // 관리자 ID
  survey       Survey             @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  @@map("survey_cancellation_requests")
}
